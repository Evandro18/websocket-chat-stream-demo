{"mappings":"ICEI,EACA,EACA,EAKA,EACA,EAVJ,MAAM,EAAe,SAAS,cAAc,CAAC,gBAC7C,IAAI,EAAc,CAAA,EAUd,EAAiB,EA0CrB,eAAe,IACb,GAAI,CAIF,AAFA,CAAA,EAAY,IAAI,UAAU,wCAAmB,EAEnC,MAAM,CAAG,IAAM,QAAQ,GAAG,CAAC,oCACrC,EAAU,OAAO,CAAG,AAAC,GAAU,QAAQ,KAAK,CAAC,mBAAoB,GACjE,EAAU,OAAO,CAAG,IAAM,QAAQ,GAAG,CAAC,+BAEtC,EAAU,SAAS,CAAG,MAAO,IAC3B,GAAI,EAAM,IAAI,YAAY,KAAM,CAC9B,IAAM,EAAS,IAAI,UACnB,CAAA,EAAO,MAAM,CAAG,UACd,IAAM,EAAc,EAAO,MAAM,CAC3B,EAAY,IAAI,WAAW,GAKjC,GAFA,iBAAmB,EAAU,UAAU,CAEnC,EAAU,MAAM,CAAG,EACrB,GAAI,CACF,MAAM,UAAU,KAAK,CAAC,OAAO,CAAC,iBAAkB,UAC9C,MAAM,EAAU,EAClB,EACF,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,uBAAwB,EACxC,MAEA,QAAQ,GAAG,CAAC,6CAEhB,EAEA,EAAO,iBAAiB,CAAC,EAAM,IAAI,CACrC,MACE,QAAQ,GAAG,CAAC,EAAM,IAAI,CAE1B,EAEA,MAAM,AA1EV,SAA2B,CAAE,EAC3B,UAAU,YAAY,CACnB,YAAY,CAAC,CACZ,MAAO,CACL,iBAAkB,CAAA,EAClB,iBAAkB,CAAA,EAClB,WAAY,IACd,CACF,GACC,IAAI,CAAC,AAAC,IACL,IAAM,EAAS,EAAe,uBAAuB,CAAC,GAChD,EAAY,EAAe,qBAAqB,CAAC,KAAM,EAAG,GAChE,EAAO,OAAO,CAAC,GACf,EAAU,OAAO,CAAC,EAAe,WAAW,EAE5C,EAAU,cAAc,CAAG,AAAC,IAC1B,IAAM,EAAY,EAAE,WAAW,CAAC,cAAc,CAAC,GACzC,EAAa,IAAI,WAAW,EAAU,MAAM,EAElD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,MAAM,CAAE,IACpC,CAAU,CAAC,EAAE,CAvBd,KAAK,GAAG,CAAC,OAAQ,KAAK,GAAG,CAAC,MAAO,AAAS,MAuBH,CAAS,CAAC,EAAE,EAGhD,CAAA,EAAG,UAAU,GAAK,UAAU,IAAI,EAClC,EAAG,IAAI,CAAC,EAAW,MAAM,CAE7B,EACA,EAAc,CAAA,EACd,EAAa,WAAW,CAAG,gBAC7B,GACC,KAAK,CAAC,AAAC,IACN,QAAQ,KAAK,CAAC,sBAAuB,EACvC,EAEJ,EAwC4B,EAkB1B,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,4BAA6B,EAC7C,CACF,CAaA,eAAe,EAAU,CAAU,EACjC,IAAM,EAAe,IAAI,aAAa,EAAW,MAAM,EACvD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,MAAM,CAAE,IACrC,CAAY,CAAC,EAAE,CAAG,CAAU,CAAC,EAAE,CAAG,MAEpC,IAAM,EAAc,EAAgB,YAAY,CAC9C,EACA,EAAa,MAAM,CACnB,MAEF,EAAY,cAAc,CAAC,GAAG,GAAG,CAAC,GAElC,IAAM,EAAS,EAAgB,kBAAkB,EACjD,CAAA,EAAO,MAAM,CAAG,EAChB,EAAO,OAAO,CAAC,EAAgB,WAAW,EAE1C,IAAM,EAAiB,EAAY,MAAM,CAAG,EAAY,UAAU,CAC9D,EAAiB,EAAgB,WAAW,EAC9C,CAAA,EAAiB,EAAgB,WAAW,AAAX,EAGnC,EAAO,KAAK,CAAC,GAGb,QAAQ,GAAG,CAAC,oBADZ,GAAkB,EAEpB,CAwBA,EAAa,gBAAgB,CAAC,QAAS,KACjC,GA5DA,GAAe,EAAc,IAAI,GACjC,GAAa,EAAY,SAAS,GAAG,OAAO,CAAC,AAAC,GAAU,EAAM,IAAI,IAClE,IACF,QAAQ,GAAG,CAAC,sBACZ,EAAU,KAAK,IAEjB,EAAc,CAAA,EACd,EAAa,WAAW,CAAG,mBAwDzB,IAGG,EAG+B,cAAzB,EAAe,KAAK,EAC7B,EAAe,MAAM,IAHrB,EAAiB,IAAI,aAAa,CAAE,WAAY,IAAM,GACtD,EAAkB,IAAI,aAAa,CAAE,WAAY,IAAM,IAIzD,EAAiB,EAAgB,WAAW,AAC9C,GAGa,IAAI","sources":["<anon>","src/index.js"],"sourcesContent":["var $35da740d59af89ba$exports = {};\nconst $35da740d59af89ba$var$recordButton = document.getElementById(\"recordButton\");\nlet $35da740d59af89ba$var$isRecording = false;\nlet $35da740d59af89ba$var$audioStream;\nlet $35da740d59af89ba$var$mediaRecorder;\nlet $35da740d59af89ba$var$webSocket;\nlet $35da740d59af89ba$var$audioContext;\nlet $35da740d59af89ba$var$source;\nlet $35da740d59af89ba$var$audioBufferQueue = [];\nlet $35da740d59af89ba$var$audioContextIn;\nlet $35da740d59af89ba$var$audioContextOut;\nlet $35da740d59af89ba$var$nextBufferTime = 0;\nfunction $35da740d59af89ba$var$convertFloat32ToInt16(sample) {\n    return Math.max(-32768, Math.min(32767, sample * 32767));\n}\nfunction $35da740d59af89ba$var$startAudioCapture(ws) {\n    navigator.mediaDevices.getUserMedia({\n        audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            sampleRate: 16000\n        }\n    }).then((stream)=>{\n        const source = $35da740d59af89ba$var$audioContextIn.createMediaStreamSource(stream);\n        const processor = $35da740d59af89ba$var$audioContextIn.createScriptProcessor(1024, 1, 1);\n        source.connect(processor);\n        processor.connect($35da740d59af89ba$var$audioContextIn.destination);\n        processor.onaudioprocess = (e)=>{\n            const inputData = e.inputBuffer.getChannelData(0);\n            const outputData = new Int16Array(inputData.length);\n            for(let i = 0; i < inputData.length; i++)outputData[i] = $35da740d59af89ba$var$convertFloat32ToInt16(inputData[i]);\n            if (ws.readyState === WebSocket.OPEN) ws.send(outputData.buffer);\n        };\n        $35da740d59af89ba$var$isRecording = true;\n        $35da740d59af89ba$var$recordButton.textContent = \"Stop Recording\";\n    }).catch((error)=>{\n        console.error(\"getUserMedia error:\", error);\n    });\n// Initialize WebSocket\n}\nasync function $35da740d59af89ba$var$startRecording() {\n    try {\n        const apiUrl = \"ws://4.158.28.14:8080/ws/chat\";\n        $35da740d59af89ba$var$webSocket = new WebSocket(`${apiUrl}/chat123`);\n        $35da740d59af89ba$var$webSocket.onopen = ()=>console.log(\"WebSocket connection established\");\n        $35da740d59af89ba$var$webSocket.onerror = (error)=>console.error(\"WebSocket error:\", error);\n        $35da740d59af89ba$var$webSocket.onclose = ()=>console.log(\"WebSocket connection closed\");\n        $35da740d59af89ba$var$webSocket.onmessage = async (event)=>{\n            if (event.data instanceof Blob) {\n                const reader = new FileReader();\n                reader.onload = async ()=>{\n                    const arrayBuffer = reader.result;\n                    const audioData = new Int16Array(arrayBuffer);\n                    // Update the latest buffer size\n                    latestBufferSize = audioData.byteLength;\n                    if (audioData.length > 0) try {\n                        await navigator.locks.request(\"audio-playback\", async ()=>{\n                            await $35da740d59af89ba$var$playAudio(audioData);\n                        });\n                    } catch (error) {\n                        console.error(\"Error playing audio:\", error);\n                    }\n                    else console.log(\"Received empty audio data after conversion\");\n                };\n                reader.readAsArrayBuffer(event.data);\n            } else console.log(event.data);\n        };\n        await $35da740d59af89ba$var$startAudioCapture($35da740d59af89ba$var$webSocket);\n    // Get user's audio stream\n    // Initialize MediaRecorder\n    //   mediaRecorder = new Recorder((event) => {\n    //     if (\n    //       webSocket.readyState === WebSocket.OPEN &&\n    //       event.data.buffer?.byteLength > 0\n    //     ) {\n    //       chunk = processAudioRecordingBuffer(event.data.buffer);\n    //       if (chunk) webSocket.send(chunk);\n    //     }\n    //   });\n    //   // mediaRecorder.ondataavailable =\n    //   audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    //   mediaRecorder.start(audioStream); // Sends audio in chunks of 100ms\n    //   isRecording = true;\n    //   recordButton.textContent = \"Stop Recording\";\n    } catch (error) {\n        console.error(\"Error starting recording:\", error);\n    }\n}\nfunction $35da740d59af89ba$var$stopRecording() {\n    if ($35da740d59af89ba$var$mediaRecorder) $35da740d59af89ba$var$mediaRecorder.stop();\n    if ($35da740d59af89ba$var$audioStream) $35da740d59af89ba$var$audioStream.getTracks().forEach((track)=>track.stop());\n    if ($35da740d59af89ba$var$webSocket) {\n        console.log(\"Closing web socket\");\n        $35da740d59af89ba$var$webSocket.close();\n    }\n    $35da740d59af89ba$var$isRecording = false;\n    $35da740d59af89ba$var$recordButton.textContent = \"Start Recording\";\n}\nasync function $35da740d59af89ba$var$playAudio(int16Array) {\n    const float32Array = new Float32Array(int16Array.length);\n    for(let i = 0; i < int16Array.length; i++)float32Array[i] = int16Array[i] / 32768.0;\n    const audioBuffer = $35da740d59af89ba$var$audioContextOut.createBuffer(1, float32Array.length, 24000);\n    audioBuffer.getChannelData(0).set(float32Array);\n    const source = $35da740d59af89ba$var$audioContextOut.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect($35da740d59af89ba$var$audioContextOut.destination);\n    const bufferDuration = audioBuffer.length / audioBuffer.sampleRate;\n    if ($35da740d59af89ba$var$nextBufferTime < $35da740d59af89ba$var$audioContextOut.currentTime) $35da740d59af89ba$var$nextBufferTime = $35da740d59af89ba$var$audioContextOut.currentTime;\n    source.start($35da740d59af89ba$var$nextBufferTime);\n    $35da740d59af89ba$var$nextBufferTime += bufferDuration;\n    console.log(\"Next buffer time:\", $35da740d59af89ba$var$nextBufferTime);\n}\n// function playAudio(audioData) {\n//   if (!audioContext) audioContext = new AudioContext();\n//   audioContext.decodeAudioData(audioData.slice(0), (buffer) => {\n//     audioBufferQueue.push(buffer);\n//     if (audioBufferQueue.length === 1) {\n//       playNextBuffer();\n//     }\n//   });\n// }\nfunction $35da740d59af89ba$var$playNextBuffer() {\n    if ($35da740d59af89ba$var$audioBufferQueue.length === 0) return;\n    const buffer = $35da740d59af89ba$var$audioBufferQueue.shift();\n    $35da740d59af89ba$var$source = $35da740d59af89ba$var$audioContext.createBufferSource();\n    $35da740d59af89ba$var$source.buffer = buffer;\n    $35da740d59af89ba$var$source.connect($35da740d59af89ba$var$audioContext.destination);\n    $35da740d59af89ba$var$source.onended = $35da740d59af89ba$var$playNextBuffer;\n    $35da740d59af89ba$var$source.start();\n}\n$35da740d59af89ba$var$recordButton.addEventListener(\"click\", ()=>{\n    if ($35da740d59af89ba$var$isRecording) $35da740d59af89ba$var$stopRecording();\n    else $35da740d59af89ba$var$startRecording();\n    if (!$35da740d59af89ba$var$audioContextIn) {\n        $35da740d59af89ba$var$audioContextIn = new AudioContext({\n            sampleRate: 16000\n        });\n        $35da740d59af89ba$var$audioContextOut = new AudioContext({\n            sampleRate: 24000\n        });\n    } else if ($35da740d59af89ba$var$audioContextIn.state === \"suspended\") $35da740d59af89ba$var$audioContextIn.resume();\n    $35da740d59af89ba$var$nextBufferTime = $35da740d59af89ba$var$audioContextOut.currentTime;\n});\nlet $35da740d59af89ba$var$recordingActive = false;\nlet $35da740d59af89ba$var$buffer = new Uint8Array();\nfunction $35da740d59af89ba$var$combineArray(newData) {\n    const newBuffer = new Uint8Array($35da740d59af89ba$var$buffer.length + newData.length);\n    newBuffer.set($35da740d59af89ba$var$buffer);\n    newBuffer.set(newData, $35da740d59af89ba$var$buffer.length);\n    $35da740d59af89ba$var$buffer = newBuffer;\n}\nfunction $35da740d59af89ba$var$processAudioRecordingBuffer(data) {\n    const uint8Array = new Uint8Array(data);\n    $35da740d59af89ba$var$combineArray(uint8Array);\n    bufferSize = 4800;\n    if ($35da740d59af89ba$var$buffer.length >= bufferSize) {\n        const toSend = new Uint8Array($35da740d59af89ba$var$buffer.slice(0, bufferSize));\n        $35da740d59af89ba$var$buffer = new Uint8Array($35da740d59af89ba$var$buffer.slice(bufferSize));\n        const regularArray = String.fromCharCode(...toSend);\n        const base64 = btoa(regularArray);\n        return base64;\n    }\n}\n\n\n//# sourceMappingURL=index.835465fe.js.map\n","const recordButton = document.getElementById(\"recordButton\");\nlet isRecording = false;\nlet audioStream;\nlet mediaRecorder;\nlet webSocket;\nlet audioContext;\nlet source;\nlet audioBufferQueue = [];\n\nlet audioContextIn;\nlet audioContextOut;\nlet nextBufferTime = 0;\n\nfunction convertFloat32ToInt16(sample) {\n  return Math.max(-32768, Math.min(32767, sample * 32767));\n}\n\nfunction startAudioCapture(ws) {\n  navigator.mediaDevices\n    .getUserMedia({\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n        sampleRate: 16000,\n      },\n    })\n    .then((stream) => {\n      const source = audioContextIn.createMediaStreamSource(stream);\n      const processor = audioContextIn.createScriptProcessor(1024, 1, 1);\n      source.connect(processor);\n      processor.connect(audioContextIn.destination);\n\n      processor.onaudioprocess = (e) => {\n        const inputData = e.inputBuffer.getChannelData(0);\n        const outputData = new Int16Array(inputData.length);\n\n        for (let i = 0; i < inputData.length; i++) {\n          outputData[i] = convertFloat32ToInt16(inputData[i]);\n        }\n\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(outputData.buffer);\n        }\n      };\n      isRecording = true;\n      recordButton.textContent = \"Stop Recording\";\n    })\n    .catch((error) => {\n      console.error(\"getUserMedia error:\", error);\n    });\n  // Initialize WebSocket\n}\n\nasync function startRecording() {\n  try {\n    const apiUrl = process.env['WEBSOCKET_API']\n    webSocket = new WebSocket(`${apiUrl}/chat123`);\n\n    webSocket.onopen = () => console.log(\"WebSocket connection established\");\n    webSocket.onerror = (error) => console.error(\"WebSocket error:\", error);\n    webSocket.onclose = () => console.log(\"WebSocket connection closed\");\n\n    webSocket.onmessage = async (event) => {\n      if (event.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = async () => {\n          const arrayBuffer = reader.result;\n          const audioData = new Int16Array(arrayBuffer);\n\n          // Update the latest buffer size\n          latestBufferSize = audioData.byteLength;\n\n          if (audioData.length > 0) {\n            try {\n              await navigator.locks.request(\"audio-playback\", async () => {\n                await playAudio(audioData);\n              });\n            } catch (error) {\n              console.error(\"Error playing audio:\", error);\n            }\n          } else {\n            console.log(\"Received empty audio data after conversion\");\n          }\n        };\n\n        reader.readAsArrayBuffer(event.data);\n      } else {\n        console.log(event.data);\n      }\n    };\n\n    await startAudioCapture(webSocket);\n\n    // Get user's audio stream\n    // Initialize MediaRecorder\n    //   mediaRecorder = new Recorder((event) => {\n    //     if (\n    //       webSocket.readyState === WebSocket.OPEN &&\n    //       event.data.buffer?.byteLength > 0\n    //     ) {\n    //       chunk = processAudioRecordingBuffer(event.data.buffer);\n    //       if (chunk) webSocket.send(chunk);\n    //     }\n    //   });\n    //   // mediaRecorder.ondataavailable =\n    //   audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    //   mediaRecorder.start(audioStream); // Sends audio in chunks of 100ms\n    //   isRecording = true;\n    //   recordButton.textContent = \"Stop Recording\";\n  } catch (error) {\n    console.error(\"Error starting recording:\", error);\n  }\n}\n\nfunction stopRecording() {\n  if (mediaRecorder) mediaRecorder.stop();\n  if (audioStream) audioStream.getTracks().forEach((track) => track.stop());\n  if (webSocket) {\n    console.log(\"Closing web socket\");\n    webSocket.close();\n  }\n  isRecording = false;\n  recordButton.textContent = \"Start Recording\";\n}\n\nasync function playAudio(int16Array) {\n  const float32Array = new Float32Array(int16Array.length);\n  for (let i = 0; i < int16Array.length; i++) {\n    float32Array[i] = int16Array[i] / 32768.0;\n  }\n  const audioBuffer = audioContextOut.createBuffer(\n    1,\n    float32Array.length,\n    24000\n  );\n  audioBuffer.getChannelData(0).set(float32Array);\n\n  const source = audioContextOut.createBufferSource();\n  source.buffer = audioBuffer;\n  source.connect(audioContextOut.destination);\n\n  const bufferDuration = audioBuffer.length / audioBuffer.sampleRate;\n  if (nextBufferTime < audioContextOut.currentTime) {\n    nextBufferTime = audioContextOut.currentTime;\n  }\n\n  source.start(nextBufferTime);\n\n  nextBufferTime += bufferDuration;\n  console.log(\"Next buffer time:\", nextBufferTime);\n}\n\n// function playAudio(audioData) {\n//   if (!audioContext) audioContext = new AudioContext();\n\n//   audioContext.decodeAudioData(audioData.slice(0), (buffer) => {\n//     audioBufferQueue.push(buffer);\n//     if (audioBufferQueue.length === 1) {\n//       playNextBuffer();\n//     }\n//   });\n// }\n\nfunction playNextBuffer() {\n  if (audioBufferQueue.length === 0) return;\n\n  const buffer = audioBufferQueue.shift();\n  source = audioContext.createBufferSource();\n  source.buffer = buffer;\n  source.connect(audioContext.destination);\n  source.onended = playNextBuffer;\n  source.start();\n}\n\nrecordButton.addEventListener(\"click\", () => {\n  if (isRecording) {\n    stopRecording();\n  } else {\n    startRecording();\n  }\n\n  if (!audioContextIn) {\n    audioContextIn = new AudioContext({ sampleRate: 16000 });\n    audioContextOut = new AudioContext({ sampleRate: 24000 });\n  } else if (audioContextIn.state === \"suspended\") {\n    audioContextIn.resume();\n  }\n  nextBufferTime = audioContextOut.currentTime;\n});\n\nlet recordingActive = false;\nlet buffer = new Uint8Array();\n\nfunction combineArray(newData) {\n  const newBuffer = new Uint8Array(buffer.length + newData.length);\n  newBuffer.set(buffer);\n  newBuffer.set(newData, buffer.length);\n  buffer = newBuffer;\n}\n\nfunction processAudioRecordingBuffer(data) {\n  const uint8Array = new Uint8Array(data);\n  combineArray(uint8Array);\n  bufferSize = 4800;\n  if (buffer.length >= bufferSize) {\n    const toSend = new Uint8Array(buffer.slice(0, bufferSize));\n    buffer = new Uint8Array(buffer.slice(bufferSize));\n    const regularArray = String.fromCharCode(...toSend);\n    const base64 = btoa(regularArray);\n    return base64;\n  }\n}\n"],"names":["$35da740d59af89ba$var$audioStream","$35da740d59af89ba$var$mediaRecorder","$35da740d59af89ba$var$webSocket","$35da740d59af89ba$var$audioContextIn","$35da740d59af89ba$var$audioContextOut","$35da740d59af89ba$var$recordButton","document","getElementById","$35da740d59af89ba$var$isRecording","$35da740d59af89ba$var$nextBufferTime","$35da740d59af89ba$var$startRecording","WebSocket","onopen","console","log","onerror","error","onclose","onmessage","event","data","Blob","reader","FileReader","onload","arrayBuffer","result","audioData","Int16Array","latestBufferSize","byteLength","length","navigator","locks","request","$35da740d59af89ba$var$playAudio","readAsArrayBuffer","$35da740d59af89ba$var$startAudioCapture","ws","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","sampleRate","then","stream","source","createMediaStreamSource","processor","createScriptProcessor","connect","destination","onaudioprocess","e","inputData","inputBuffer","getChannelData","outputData","i","Math","max","min","sample","readyState","OPEN","send","buffer","textContent","catch","int16Array","float32Array","Float32Array","audioBuffer","createBuffer","set","createBufferSource","bufferDuration","currentTime","start","addEventListener","stop","getTracks","forEach","track","close","state","resume","AudioContext","Uint8Array"],"version":3,"file":"index.835465fe.js.map"}